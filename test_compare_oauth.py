#!/usr/bin/env python3
"""
Compare our OAuth implementation with requests-oauthlib
"""

import os
import sys
import time
import hashlib
import hmac
import base64
import urllib.request
from urllib.parse import urlencode, quote
import json

# Try to trace what requests-oauthlib is doing
import requests
from requests_oauthlib import OAuth1
from oauthlib.common import generate_nonce, generate_timestamp

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_with_oauthlib_details():
    """Test and trace OAuth details"""
    api_key = "e6b1100db018427482300dc87cf31117"
    api_secret = "ebf7f2fa53974daea57035822ec65a90"

    print("Testing OAuth with detailed tracing")
    print("=" * 60)

    # Create OAuth1 and examine what it generates
    auth = OAuth1(api_key, api_secret)

    # Prepare a request to see what headers it generates
    endpoint = "https://api.thenounproject.com/v2/icon"
    params = {'query': 'computer', 'limit': '5'}

    # Create a prepared request to examine headers
    req = requests.Request('GET', endpoint, params=params, auth=auth)
    prepared = req.prepare()

    print("Headers generated by requests-oauthlib:")
    for key, value in prepared.headers.items():
        if key == 'Authorization':
            # Convert bytes to string if needed
            if isinstance(value, bytes):
                value = value.decode('utf-8')
            # Print OAuth header details
            print(f"  {key}: {value[:100]}...")
            # Parse OAuth parameters
            if value.startswith('OAuth '):
                oauth_str = value[6:]  # Remove 'OAuth ' prefix
                oauth_params = {}
                for param in oauth_str.split(', '):
                    if '=' in param:
                        k, v = param.split('=', 1)
                        oauth_params[k] = v.strip('"')
                print("\n  OAuth Parameters:")
                for k, v in sorted(oauth_params.items()):
                    if k == 'oauth_signature':
                        print(f"    {k}: {v[:20]}...")
                    elif k == 'oauth_nonce':
                        print(f"    {k}: {v} (length: {len(v)})")
                    else:
                        print(f"    {k}: {v}")
        else:
            print(f"  {key}: {value}")

    print("\n" + "=" * 60)

    # Now make the actual request
    response = requests.get(endpoint, params=params, auth=auth)
    print(f"\nActual Request Status: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"✓ SUCCESS - Found {len(data.get('icons', []))} icons")

def our_oauth_implementation():
    """Our implementation for comparison"""
    api_key = "e6b1100db018427482300dc87cf31117"
    api_secret = "ebf7f2fa53974daea57035822ec65a90"

    print("\n" + "=" * 60)
    print("Our OAuth Implementation")
    print("=" * 60)

    endpoint = "https://api.thenounproject.com/v2/icon"
    params = {
        'query': 'computer',
        'limit': '5',
        'thumbnail_size': '84'
    }

    # OAuth parameters
    oauth_params = {
        'oauth_consumer_key': api_key,
        'oauth_signature_method': 'HMAC-SHA1',
        'oauth_timestamp': str(int(time.time())),
        'oauth_nonce': base64.b64encode(os.urandom(32)).decode('utf-8'),
        'oauth_version': '1.0'
    }

    print("Our OAuth Parameters:")
    for k, v in sorted(oauth_params.items()):
        if k == 'oauth_nonce':
            print(f"  {k}: {v} (length: {len(v)})")
        else:
            print(f"  {k}: {v}")

    # Combine all parameters
    all_params = {**params, **oauth_params}

    # Sort and encode
    sorted_params = sorted(all_params.items())
    param_string = '&'.join([f"{quote(k)}={quote(str(v))}" for k, v in sorted_params])

    # Create signature base string
    signature_base = f"GET&{quote(endpoint)}&{quote(param_string)}"

    print(f"\nSignature base string (first 150 chars):")
    print(f"  {signature_base[:150]}...")

    # Create signing key
    signing_key = f"{api_secret}&"

    # Generate signature
    signature = base64.b64encode(
        hmac.new(
            signing_key.encode('utf-8'),
            signature_base.encode('utf-8'),
            hashlib.sha1
        ).digest()
    ).decode('utf-8')

    oauth_params['oauth_signature'] = signature

    print(f"\nOAuth signature: {signature[:20]}...")

    # Build Authorization header
    auth_header = 'OAuth ' + ', '.join([
        f'{k}="{quote(str(v))}"' for k, v in oauth_params.items()
    ])

    # Build URL with query parameters
    url = f"{endpoint}?{urlencode(params)}"

    print(f"\nMaking request to: {url}")

    try:
        req = urllib.request.Request(url)
        req.add_header('Authorization', auth_header)
        req.add_header('Accept', 'application/json')

        response = urllib.request.urlopen(req, timeout=10)
        data = json.loads(response.read())

        print(f"✓ SUCCESS - Status: {response.status}")
        print(f"  Found {len(data.get('icons', []))} icons")

    except urllib.request.HTTPError as e:
        print(f"✗ FAILED - {e.code}: {e.reason}")

if __name__ == "__main__":
    test_with_oauthlib_details()
    our_oauth_implementation()